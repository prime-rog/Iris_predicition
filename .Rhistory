install.packages(shiny)
install.packages("shiny")
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
shiny::runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
install("shinythemes")
install.packages("shinythemes")
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
iris.csv
str(iris)
shiny::runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
install.packages('caret')
install.packages("caret")
install.packages("caret")
install.packages("caret")
str(iris)
shiny::runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
TrainSet<-read.csv("training.csv" , header = TRUE)
TrainSet <- TrainSet[,-1]
TrainSet<-read.csv("training.csv" , header = TRUE)
TrainSet <- TrainSet[,-1]
str(TrainSet)
str(TrainSet)
TrainSet<-read.csv("training.csv" , header = TRUE)
write.csv(TrainingSet , "training.csv")
TrainigIndex <- createDataPartition(iris$Species , p = 0.8 , list = FALSE)
library(randomForest)
library(caret)
iris <- iris
TrainigIndex <- createDataPartition(iris$Species , p = 0.8 , list = FALSE)
library(caret)
install.packages(c("Amelia", "bit", "blob", "broom", "bslib", "cachem", "callr", "checkmate", "classInt", "cli", "colorspace", "commonmark", "covr", "crayon", "curl", "data.table", "DBI", "dbplyr", "deldir", "DEoptimR", "desc", "digest", "dslabs", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "fastmap", "forcats", "Formula", "fs", "gargle", "generics", "ggplot2", "ggrepel", "googledrive", "googlesheets4", "gtable", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "httr", "interp", "isoband", "jpeg", "jsonlite", "knitr", "Lahman", "later", "latticeExtra", "lessR", "lubridate", "mapproj", "maps", "maptools", "markdown", "MatrixModels", "mnormt", "modelr", "multcomp", "mvtnorm", "openssl", "openxlsx", "packrat", "pkgload", "plumber", "plyr", "png", "processx", "profvis", "proxy", "ps", "psych", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readODS", "readr", "readxl", "reprex", "rgeos", "rmarkdown", "robustbase", "rsconnect", "rstudioapi", "rvest", "s2", "sandwich", "sass", "scales", "sourcetools", "sp", "stringi", "stringr", "svglite", "sys", "testthat", "TH.data", "tidyr", "tidyverse", "tinytex", "triangle", "units", "utf8", "vdiffr", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "yaml", "zip", "zoo"))
library(randomForest)
library(caret)
library(randomForest)
library(caret)
install.packages(lattice)
library(caret)
install.packages("lattice")
install.packages("lattice")
detach("package:lattice", unload = TRUE)
install.packages("lattice", dependencies=TRUE)
install.packages("lattice", dependencies = TRUE)
library(caret)
detach("package:ggplot2", unload = TRUE)
library(caret)
library(lattice, lib.loc = "C:/Program Files/R/R-4.2.2/library")
library(lattice)
library(caret)
library(lattice)
library(caret)
library(caret)
TestingSet <- iris[135:150]
TestingSet <- iris[135:150 , ]
library(randomForest)
iris <- iris
TrainigSet <- iris[1:135 , ]
write.csv(TrainingSet , "training.csv")
write.csv(TrainingSet , "training.csv")
write.csv(TestingSet , "testing.csv")
TrainSet<-read.csv("training.csv" , header = TRUE)
install.packages('Rcurl')
install.packages('RCurl')
# Save model to RDS file
saveRDS(model, "model.rds")
source("C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter/model.R", echo=TRUE)
library(caret)
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
remove.packages("caret")
library(caret)
install.packages('caret')
library(caret)
library(randomForest)
iris <- iris
TrainigSet <- iris[1:135 , ]
TestingSet <- iris[135:150 , ]
write.csv(TrainingSet , "training.csv")
TrainingSet <- iris[1:135 , ]
TestingSet <- iris[135:150 , ]
write.csv(TrainingSet , "training.csv")
write.csv(TestingSet , "testing.csv")
TrainSet<-read.csv("training.csv" , header = TRUE)
str(TrainSet)
TrainSet <- TrainSet[,-1]
model <- randomForest(Species ~ . , data = TrainSet , ntree = 500 , mtry =4 , importance=FALSE)
library(randomForest)
iris <- iris
TrainingSet <- iris[1:135 , ]
TestingSet <- iris[135:150 , ]
write.csv(TrainingSet , "training.csv")
write.csv(TestingSet , "testing.csv")
TrainSet<-read.csv("training.csv" , header = TRUE)
str(TrainSet)
TrainSet <- TrainSet[,-1]
model <- randomForest(Species ~ . , data = TrainSet , ntree = 500 , mtry =4 , importance=FALSE)
y
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
library(randomForest)
iris <- iris
TrainingSet <- iris[1:135 , ]
TestingSet <- iris[135:150 , ]
write.csv(TrainingSet , "training.csv")
write.csv(TestingSet , "testing.csv")
TrainSet<-read.csv("training.csv" , header = TRUE)
str(TrainSet)
TrainSet <- TrainSet[,-1]
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
model <- randomForest(as.factor(Species) ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
saveRDS(model , "model.rds")
shiny::runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
source("C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter/model.R", echo=TRUE)
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
library(shiny)
library(data.table)
library(randomForest)
model <- readRDS("model.rds")
model <- readRDS("model.rds")
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("model.rds")
getwd()
setwd("C:\\Users\\aman singh\\OneDrive - DIT University\\Desktop\\R_Model\\Iris_predicter")
getwd()
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h4>"),
sliderInput("Sepal.Length", label = "Sepal Length", value = 5.0,
min = min(TrainSet$Sepal.Length),
max = max(TrainSet$Sepal.Length)
),
sliderInput("Sepal.Width", label = "Sepal Width", value = 3.6,
min = min(TrainSet$Sepal.Width),
max = max(TrainSet$Sepal.Width)),
sliderInput("Petal.Length", label = "Petal Length", value = 1.4,
min = min(TrainSet$Petal.Length),
max = max(TrainSet$Petal.Length)),
sliderInput("Petal.Width", label = "Petal Width", value = 0.2,
min = min(TrainSet$Petal.Width),
max = max(TrainSet$Petal.Width)),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
install.packages('fastmap')
install.packages("fastmap")
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h4>"),
sliderInput("Sepal.Length", label = "Sepal Length", value = 5.0,
min = min(TrainSet$Sepal.Length),
max = max(TrainSet$Sepal.Length)
),
sliderInput("Sepal.Width", label = "Sepal Width", value = 3.6,
min = min(TrainSet$Sepal.Width),
max = max(TrainSet$Sepal.Width)),
sliderInput("Petal.Length", label = "Petal Length", value = 1.4,
min = min(TrainSet$Petal.Length),
max = max(TrainSet$Petal.Length)),
sliderInput("Petal.Width", label = "Petal Width", value = 0.2,
min = min(TrainSet$Petal.Width),
max = max(TrainSet$Petal.Width)),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
library(fastmap)
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h4>"),
sliderInput("Sepal.Length", label = "Sepal Length", value = 5.0,
min = min(TrainSet$Sepal.Length),
max = max(TrainSet$Sepal.Length)
),
sliderInput("Sepal.Width", label = "Sepal Width", value = 3.6,
min = min(TrainSet$Sepal.Width),
max = max(TrainSet$Sepal.Width)),
sliderInput("Petal.Length", label = "Petal Length", value = 1.4,
min = min(TrainSet$Petal.Length),
max = max(TrainSet$Petal.Length)),
sliderInput("Petal.Width", label = "Petal Width", value = 0.2,
min = min(TrainSet$Petal.Width),
max = max(TrainSet$Petal.Width)),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
install.packages("fastmap")
detach("package:fastmap", unload = TRUE)
detach("package:shiny", unload = TRUE)
detach("package:fastmap", unload = TRUE)
install.packages("fastmap")
(shiny)
library(shiny)
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h4>"),
sliderInput("Sepal.Length", label = "Sepal Length", value = 5.0,
min = min(TrainSet$Sepal.Length),
max = max(TrainSet$Sepal.Length)
),
sliderInput("Sepal.Width", label = "Sepal Width", value = 3.6,
min = min(TrainSet$Sepal.Width),
max = max(TrainSet$Sepal.Width)),
sliderInput("Petal.Length", label = "Petal Length", value = 1.4,
min = min(TrainSet$Petal.Length),
max = max(TrainSet$Petal.Length)),
sliderInput("Petal.Width", label = "Petal Width", value = 0.2,
min = min(TrainSet$Petal.Width),
max = max(TrainSet$Petal.Width)),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
